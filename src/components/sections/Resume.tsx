
import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { Dialog, DialogContent, DialogTrigger } from '@/components/ui/dialog';
import { Download, Eye, FileText, X, Award, BookOpen, Coffee } from 'lucide-react';
import { toast } from 'sonner';

// Mock resume URL - replace with your actual resume URL
const RESUME_URL = '/resume.pdf';

// Gemini AI integration for dynamic highlight generation
interface GeminiResponse {
  highlight: string;
  category: string;
  icon: 'award' | 'book-open' | 'coffee';
}

const Resume = () => {
  const [pdfLoaded, setPdfLoaded] = useState(false);
  const [highlights, setHighlights] = useState<GeminiResponse[]>([
    {
      highlight: "Full Stack Development with React, Node.js, and TypeScript",
      category: "Development",
      icon: "award"
    },
    {
      highlight: "Machine Learning specialization with PyTorch and TensorFlow",
      category: "AI/ML",
      icon: "book-open"
    },
    {
      highlight: "5+ years experience working with distributed teams",
      category: "Experience",
      icon: "coffee"
    },
    {
      highlight: "Open Source contributor to various GitHub projects",
      category: "Community",
      icon: "award"
    },
    {
      highlight: "Conference speaker on AI and web technologies",
      category: "Speaking",
      icon: "book-open"
    }
  ]);
  const [selectedHighlight, setSelectedHighlight] = useState<number | null>(null);
  const [isGeneratingHighlight, setIsGeneratingHighlight] = useState(false);

  // Simulate Gemini AI generating a new highlight
  const generateNewHighlight = async () => {
    setIsGeneratingHighlight(true);
    
    // Simulate API call delay
    setTimeout(() => {
      const newHighlight: GeminiResponse = {
        highlight: "Created interactive data visualizations using D3.js and WebGL",
        category: "Creative Development",
        icon: "award"
      };
      
      setHighlights(prev => [...prev, newHighlight]);
      setIsGeneratingHighlight(false);
      toast.success("New highlight generated by Gemini AI");
    }, 1500);
  };

  // Get icon component based on icon name
  const getIconComponent = (iconName: string) => {
    switch (iconName) {
      case 'award':
        return <Award className="text-neon-green" size={18} />;
      case 'book-open':
        return <BookOpen className="text-neon-green" size={18} />;
      case 'coffee':
        return <Coffee className="text-neon-green" size={18} />;
      default:
        return <Award className="text-neon-green" size={18} />;
    }
  };

  return (
    <section id="resume" className="py-20 bg-github-dark relative">
      <div className="section-container">
        <h2 className="section-title mb-12">Resume</h2>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          <motion.div 
            initial={{ opacity: 0, y: 20 }} 
            whileInView={{ opacity: 1, y: 0 }} 
            transition={{ duration: 0.5 }}
            viewport={{ once: true }}
            className="bg-github-light rounded-lg p-6 border border-github-border card-hover"
          >
            <div className="flex items-start justify-between mb-4">
              <div className="flex items-center">
                <FileText className="text-neon-green mr-3" size={24} />
                <h3 className="text-xl font-semibold text-white">My Resume</h3>
              </div>
              <span className="px-3 py-1 bg-neon-green/20 text-neon-green text-xs rounded-full">PDF</span>
            </div>
            
            <p className="text-github-text mb-6">
              Check out my professional experience, skills, and educational background.
              Download the PDF or view it directly on this page.
            </p>
            
            <div className="flex flex-wrap gap-3">
              <Dialog>
                <DialogTrigger asChild>
                  <button className="flex items-center gap-2 px-4 py-2 bg-neon-green text-black font-medium rounded-md hover:bg-neon-green/90 transition-all">
                    <Eye size={16} />
                    View Resume
                  </button>
                </DialogTrigger>
                <DialogContent className="max-w-4xl w-[90vw] h-[90vh] p-0">
                  <div className="flex justify-between items-center p-4 border-b border-github-border">
                    <h4 className="font-semibold text-lg">Resume Preview</h4>
                    <div className="flex items-center gap-2">
                      <a 
                        href={RESUME_URL} 
                        download="GREENHACKER_Resume.pdf"
                        className="flex items-center gap-2 px-3 py-1 bg-neon-green text-black text-sm rounded-md hover:bg-neon-green/90 transition-all"
                      >
                        <Download size={14} />
                        Download
                      </a>
                      <DialogTrigger asChild>
                        <button className="p-1 rounded-full hover:bg-github-border/30 transition-colors">
                          <X size={18} />
                        </button>
                      </DialogTrigger>
                    </div>
                  </div>
                  <div className="h-full bg-gray-800 overflow-auto">
                    <iframe 
                      src={RESUME_URL}
                      className="w-full h-full" 
                      title="Resume Preview"
                      onLoad={() => setPdfLoaded(true)}
                    />
                    {!pdfLoaded && (
                      <div className="absolute inset-0 flex items-center justify-center bg-github-dark/80">
                        <div className="text-center">
                          <div className="w-16 h-16 border-4 border-neon-green/30 border-t-neon-green rounded-full animate-spin mx-auto mb-4"></div>
                          <p className="text-github-text">Loading resume...</p>
                        </div>
                      </div>
                    )}
                  </div>
                </DialogContent>
              </Dialog>
              
              <a 
                href={RESUME_URL} 
                download="GREENHACKER_Resume.pdf"
                className="flex items-center gap-2 px-4 py-2 bg-transparent border border-neon-green text-neon-green font-medium rounded-md hover:bg-neon-green/10 transition-all"
              >
                <Download size={16} />
                Download PDF
              </a>
            </div>
          </motion.div>
          
          <motion.div 
            initial={{ opacity: 0, y: 20 }} 
            whileInView={{ opacity: 1, y: 0 }} 
            transition={{ duration: 0.5, delay: 0.2 }}
            viewport={{ once: true }}
            className="bg-github-light rounded-lg p-6 border border-github-border"
          >
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-xl font-semibold text-white">Highlights</h3>
              <button 
                onClick={generateNewHighlight}
                disabled={isGeneratingHighlight}
                className="px-3 py-1 bg-neon-purple/20 text-neon-purple text-xs rounded-full hover:bg-neon-purple/30 transition-colors flex items-center gap-1"
              >
                {isGeneratingHighlight ? (
                  <>
                    <span className="h-2 w-2 bg-neon-purple rounded-full animate-pulse"></span>
                    <span>Generating...</span>
                  </>
                ) : (
                  <>
                    <span>+ Generate with Gemini</span>
                  </>
                )}
              </button>
            </div>
            
            <ul className="space-y-4">
              {highlights.map((item, index) => (
                <motion.li 
                  key={index}
                  initial={{ opacity: 0, x: -20 }}
                  whileInView={{ opacity: 1, x: 0 }}
                  transition={{ duration: 0.3, delay: 0.1 * index }}
                  viewport={{ once: true }}
                  className={`flex items-start p-3 rounded-md transition-all cursor-pointer ${selectedHighlight === index ? 'bg-github-border/30' : 'hover:bg-github-border/10'}`}
                  onClick={() => setSelectedHighlight(index === selectedHighlight ? null : index)}
                >
                  <div className="bg-github-dark/50 p-2 rounded-md mr-3">
                    {getIconComponent(item.icon)}
                  </div>
                  <div>
                    <div className="flex items-center">
                      <span className="text-neon-green text-xs uppercase tracking-wider">{item.category}</span>
                    </div>
                    <span className="text-github-text block mt-1">{item.highlight}</span>
                    
                    {selectedHighlight === index && (
                      <motion.div 
                        initial={{ opacity: 0, height: 0 }}
                        animate={{ opacity: 1, height: 'auto' }}
                        className="mt-3 text-sm text-github-text/80 border-t border-github-border/30 pt-3"
                      >
                        <p>This highlight showcases expertise in {item.category.toLowerCase()}. 
                        Click to collapse this additional information.</p>
                      </motion.div>
                    )}
                  </div>
                </motion.li>
              ))}
            </ul>
          </motion.div>
        </div>
      </div>
    </section>
  );
};

export default Resume;
